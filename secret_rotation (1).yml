---
AWSTemplateFormatVersion: "2010-09-09"
Description: Secret rotation lambda
Parameters:
  CWLogsRetentionPeriod:
    Type: Number
    Default: 7
  SumoLogShipperLambdaArn:
    Type: String
    Default: 'test'
  PwdAdminArn:
    Type: String
  SnsStack:
    Type: String
  KmsStack:
    Type: String
  Proxy:
    Type: String
    Description: system proxy
    Default: "http://proxy.int.sharedsvc.a-sharedinfra.net:8080"
  SlackHook:
    Type: String
    Description: incomming webhook for slack
  LogBucketPrefix:
    Type: "String"
    Default: "kmartau-vendorportal-logs"
    Description: Log bucket name  
  AlbStack:
    Type: String
  WAFScope:
    Type: String
    Description: Enables xray tracing on lambda
    AllowedValues: ["CLOUDFRONT", "REGIONAL"]
    Default: "REGIONAL"  
  EnableXraySecretRotationLambda:
    Type: String
    Description: Enables xray tracing on lambda
    AllowedValues: ["true", "false"]
    Default: "false"
  SchedulerState:
    Type: String
    AllowedValues: [DISABLED, ENABLED] 
    Description: Sate of Scheduler
    Default: DISABLED
  LambdaPackageName:
    Type: String
    Description: Lambda package name
    Default: test
  SecretRotationLambdaS3Key:
    Type: String
    Description: Lambda package s3 key
  BillingTag:
    Default: "vendorportal"
    Type: "String"
  OwnerTag:
    Default: "vendorportal"
    Type: "String"
  ProjectTag:
    Default: "vendorportal"
    Type: "String"
  Environment:
    Default: "dev"
    AllowedValues: [dev, prod, nonprod]
    Type: "String"
  SgStack:
    Description: StackName without the component name
    Type: String     
  S3Stack:
    Description: StackName without the component name
    Type: String
  VpcBaseStack:
    Type: String
    AllowedPattern: '[A-Za-z][A-Za-z0-9-]{0,127}'  
Conditions: 
  IsProd: !Equals [ !Ref Environment, "prod" ]
  IsNonProd: !Equals [ !Ref Environment, "nonprod" ]
  IsDev: !Equals [ !Ref Environment, "dev" ]
  EnableXraySecretRotationLambda: !Equals [ "true", !Ref EnableXraySecretRotationLambda ]
  IsSumoLogShipperLambdaArn: !Not [!Equals [ !Ref SumoLogShipperLambdaArn, "" ]]

Resources:
  VendorPortalDocDbSecRotLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${VendorPortalDocDbSecRotLambda}"
      RetentionInDays: !Ref CWLogsRetentionPeriod
  VendorPortalDocDbSecRotSumoCWLogSubsriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsSumoLogShipperLambdaArn
    Properties:
      LogGroupName: !Ref VendorPortalDocDbSecRotLogGroup        
      DestinationArn: !Ref SumoLogShipperLambdaArn           
      FilterPattern: ''
  VendorPortalDocDbSecRotLambdaRoleARNSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${ProjectTag}/lambda/iam-role-arn/secrot"
      Type: String
      Value: !GetAtt VendorPortalDocDbSecRotLambdaRole.Arn
      Description: !Sub "SSM Parameter stores secret rotation role arn"
      Tags:
        Name: !Sub "${AWS::StackName}-ssm-param-lambda-role-arn"
        Billinge: !Sub "${BillingTag}"
        Environment: !Sub "${Environment}"        
        Owner: !Sub "${OwnerTag}"
        Project: !Sub "${ProjectTag}"
  VendorPortalDocDbSecRotLambdaSSM:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${ProjectTag}/lambda/arn/secrotv2"
      Type: String
      Value: !GetAtt VendorPortalDocDbSecRotLambda.Arn
      Description: !Sub "SSM Parameter stores secret rotation lambda arn"
      Tags:
        Name: !Sub "${AWS::StackName}-ssm-param-lambda-arn"
        Billinge: !Sub "${BillingTag}"
        Environment: !Sub "${Environment}"        
        Owner: !Sub "${OwnerTag}"
        Project: !Sub "${ProjectTag}"        
  VendorPortalDocDbSecRotLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-iam-role-secret-rotation"
        - Key: Billing
          Value: !Sub "${BillingTag}"
        - Key: Environment
          Value: !Sub "${Environment}"        
        - Key: Owner
          Value: !Sub "${OwnerTag}"
        - Key: Project
          Value: !Sub "${ProjectTag}"
      Path: "/"
      Policies:
        - PolicyName: ssm-read-access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "ssm:Describe*"
                  - "ssm:Get*"
                  - "ssm:List*"
                Effect: "Allow"
                Resource: "*"      
        - PolicyName: "log-usage-policy"
          PolicyDocument:
            Statement:
              - Effect: "Allow"
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream                  
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"
        - PolicyName: "secret-manager-permissions"
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - secretsmanager:DescribeSecret
                - secretsmanager:GetSecretValue
                - secretsmanager:PutSecretValue
                - secretsmanager:UpdateSecretVersionStage
              Resource: 
                - arn:aws:secretsmanager:ap-southeast-2:187628286232:secret:vendorportal/testv1-xES0q3              
                - arn:aws:secretsmanager:ap-southeast-2:187628286232:secret:vendorportal/pwdadm-0rhapq
              # Condition:
              #   StringEquals:
              #     aws:SourceAccount: !Ref AWS::AccountId
              #     secretsmanager:resource/AllowRotationLambdaArn: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:vendorportal-docdb-secrot-${Environment}"                    
                  
        - PolicyName: "generate-pwd"
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                - secretsmanager:GetRandomPassword
                Resource: "*"               
        - PolicyName: "EC2Permissions"
          PolicyDocument:
            Statement:
              - Effect: "Allow"
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:AssignPrivateIpAddresses
                  - ec2:UnassignPrivateIpAddresses
                Resource: "*"
        - !If 
          - EnableXraySecretRotationLambda
          - PolicyName: "xray-permissions"
            PolicyDocument:
              Statement:
                - Effect: "Allow"
                  Action:                  
                    - xray:PutTraceSegments
                    - xray:PutTelemetryRecords
                  Resource: "*"
          - !Ref AWS::NoValue                
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: ['sts:AssumeRole']
  VendorPortalDocDbSecRotLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref VendorPortalDocDbSecRotLambda
      Principal: secretsmanager.amazonaws.com      
      SourceAccount: !Ref AWS::AccountId
  VendorPortalDocDbSecRotLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub vendorportal-docdb-secrot-v2-${Environment}
      Role: !GetAtt VendorPortalDocDbSecRotLambdaRole.Arn   
      Handler: lambda_function.lambda_handler
      Runtime: python3.7
      TracingConfig:
        Mode: 
          !If 
            - EnableXraySecretRotationLambda        
            - Active
            - !Ref AWS::NoValue      
      Timeout: 200
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-lambda-${Environment}"
        - Key: Billing
          Value: !Ref BillingTag
        - Key: Environment
          Value: !Ref Environment        
        - Key: Owner
          Value: !Ref OwnerTag
        - Key: Project
          Value: !Ref ProjectTag
      Code:
        S3Bucket:
          Fn::ImportValue: !Sub ${S3Stack}::VendorPortalArtifactBucketName
        S3Key: !Sub "${SecretRotationLambdaS3Key}/${LambdaPackageName}.zip"
      VpcConfig: 
        SecurityGroupIds:
          - Fn::ImportValue: !Sub "${SgStack}::VendorportalLambdaSecurityGroup"
        SubnetIds:
          - Fn::ImportValue: !Sub "${VpcBaseStack}::SubnetIdPrivateAz1"
          - Fn::ImportValue: !Sub "${VpcBaseStack}::SubnetIdPrivateAz2"
          - Fn::ImportValue: !Sub "${VpcBaseStack}::SubnetIdPrivateAz2"
      Environment:
        Variables:
          PROJECT: !Ref ProjectTag
          KMS_KEY:
            Fn::ImportValue: !Sub ${KmsStack}::KMSKey
          SLACK_HOOK: !Ref SlackHook          
          ARN: !Ref PwdAdminArn            
          REGION: !Ref "AWS::Region"
          ENVIRONMENT: !Ref Environment
          SNS_TOPIC:
            Fn::ImportValue: !Sub ${SnsStack}::PlatformNotificationTopic
          PROXY: !Ref Proxy
Outputs:
  VendorPortalDocDbSecRotLambdaArn:
    Description: "A reference to the lambda function"
    Value: !GetAtt VendorPortalDocDbSecRotLambda.Arn
    Export:
      Name: !Sub '${AWS::StackName}::VendorPortalDocDbSecRotLambdaArn'
  VendorPortalDocDbSecRotLambdaRoleARN:
    Description: "A reference to the lambda function"
    Value: !GetAtt VendorPortalDocDbSecRotLambdaRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}::VendorPortalDocDbSecRotLambdaRoleArn'                    